<?xml version="1.0" encoding="UTF-8"?>
<idl name="electrum-protocol" version="1.2">

	<!-- struct -->
	<struct name="scripthash_balance" desc="result of 'blockchain.scripthash.get_balance'">
		<param name="confirmed" type="string" desc="Confirmed balance"/>
		<param name="unconfirmed" type="string" desc="Unconfirmed balance"/>
	</struct>
	<struct name="block_header" desc="result of 'blockchain.headers.subscribe'">
		<param name="hex" type="string" desc="The binary header as a hexadecimal string"/>
		<param name="height" type="number" desc="The height of the header, an integer"/>
	</struct>
	<struct name="tx_merkle" desc="result of 'blockchain.transaction.get_merkle'">
		<param name="block_height" type="number" desc="The height of the block the transaction was confirmed in"/>
		<param name="merkle" type="array<string>" desc="A list of transaction hashes the current hash is paired with, recursively, in order to trace up to obtain merkle root of the block, deepest pairing first"/>
		<param name="pos" type="number" desc="The 0-based index of the position of the transaction in the ordered list of transactions in the block"/>
	</struct>
	<struct name="tx_info_history" desc="result of 'blockchain.scripthash.get_history'">
		<param name="height" type="number" desc="The integer height of the block the transaction was confirmed in"/>
		<param name="tx_hash" type="string" desc="The transaction hash in hexadecimal"/>
    <!-- TODO: add optional fee param -->
	</struct>
	<struct name="tx_info_mempool" desc="result of 'blockchain.scripthash.get_mempool'">
		<param name="height" type="number" desc="0 if all inputs are confirmed, and -1 otherwise"/>
		<param name="tx_hash" type="string" desc="The transaction hash in hexadecimal"/>
		<param name="fee" type="number" desc="The transaction fee in minimum coin units (satoshis)"/>
	</struct>
	<struct name="tx_info_unspent" desc="result of 'blockchain.scripthash.listunspent'">
		<param name="height" type="number" desc="The integer height of the block the transaction was confirmed in. 0 if the transaction is in the mempool"/>
		<param name="tx_pos" type="number" desc="The zero-based index of the output in the transaction’s list of outputs"/>
		<param name="tx_hash" type="string" desc="The output’s transaction hash as a hexadecimal string"/>
		<param name="value" type="number" desc="The output’s value in minimum coin units (satoshis)"/>
	</struct>
	<struct name="get_block_header" desc="result of 'blockchain.block.headers'">
		<param name="header" type="string" desc="The raw block header as a hexadecimal string. Starting with version 1.4.1, AuxPoW data (if present in the original header) is truncated."/>
		<param name="root" type="string" desc="The merkle root of all blockchain headers up to and including cp_height."/>
		<param name="branch" type="array<string>" desc="The merkle branch of the last returned header up to root, deepest pairing first."/>
	</struct>
	<struct name="get_block_headers" desc="result of 'blockchain.block.headers'">
		<param name="count" type="number" desc="The number of headers returned, between zero and the number requested. If the chain has not extended sufficiently far, only the available headers will be returned. If more headers than max were requested at most max will be returned."/>
		<param name="hex" type="string" desc="The binary block headers concatenated together in-order as a hexadecimal string. Starting with version 1.4.1, AuxPoW data (if present in the original header) is truncated if cp_height is nonzero."/>
		<param name="max" type="number" desc="The maximum number of headers the server will return in a single request."/>
		<param name="root" type="string" desc="The merkle root of all blockchain headers up to and including cp_height."/>
		<param name="branch" type="array<string>" desc="The merkle branch of the last returned header up to root, deepest pairing first."/>
	</struct>

	<!-- rpc -->

	<request name="server.version" dir="client" result="string" desc="Identify the client to the server and negotiate the protocol version.">
		<param name="client_name" type="string" desc="A string identifying the connecting client software."/>
		<param name="protocol_version" type="tuple[string,string]" default="['1.2', '1.4']" desc="An array [protocol_min, protocol_max], each of which is a string. If protocol_min and protocol_max are the same, they can be passed as a single string rather than as an array of two strings, as for the default value."/>
	</request>

	<request name="server.banner" dir="client" result="string" desc="Return a banner to be shown in the Electrum console." />
	<request name="server.donation_address" dir="client" result="string" desc="Return a server donation address." />
	<request name="server.features" dir="client" result="object" desc="Return a list of features and services supported by the server." />
	<request name="server.peers.subscribe" dir="client" result="tuple<string,string,array<string>>" desc="Return a list of peer servers. Despite the name this is not a subscription and the server must send no notifications."/>

	<request name="blockchain.transaction.broadcast" dir="client" result="string" desc="Broadcast a transaction to the network.">
		<param name="rawtx" type="string" desc="The raw transaction as a hexadecimal string."/>
	</request>
	<request name="blockchain.transaction.get_merkle" dir="client" result="tx_merkle" desc="Return the merkle branch to a confirmed transaction given its hash and height.">
		<param name="tx_hash" type="string" desc="The transaction hash as a hexadecimal string."/>
		<param name="tx_height" type="number" desc="The height at which it was confirmed, an integer."/>
	</request>
	<request name="blockchain.transaction.get" dir="client" result="string" desc="Return a raw transaction.">
		<param name="tx_hash" type="string" desc="The transaction hash as a hexadecimal string."/>
		<param name="verbose" type="boolean" default="false" desc="Whether a verbose coin-specific response is required."/>
	</request>

	<request name="blockchain.estimatefee" dir="client" result="number" desc="Return the estimated transaction fee per kilobyte for a transaction to be confirmed within a certain number of blocks.">
		<param name="target_block" type="number" desc="The number of blocks to target for confirmation."/>
	</request>

	<request name="blockchain.block.get_header" dir="client" result="object" desc="Return the deserialized header of the block at the given height.">
		<param name="height" type="number" desc="The height of the block, an integer."/>
	</request>

	<request name="blockchain.block.header" dir="client" result="get_block_header" desc="Return the deserialized header of the block at the given height.">
		<param name="height" type="number" desc="The height of the block, an integer."/>
	</request>

	<request name="blockchain.block.headers" dir="client" result="get_block_headers" desc="Return the deserialized header of the block at the given height.">
		<param name="start_height" type="number" desc="The height of the first header requested, a non-negative integer."/>
		<param name="count" type="number" desc="The number of headers requested, a non-negative integer."/>
	</request>

	<request name="blockchain.headers.subscribe" dir="client" result="block_header" desc="Subscribe to receive block headers when a new block is found."/>
	<notification name="blockchain.headers.subscribe" dir="server">
		<param name="block_header" type="array<block_header>" desc="The height and hex-serialized headers of a block."/>
	</notification>

	<!-- from 1.1 -->
	<request name="blockchain.scripthash.get_balance" dir="client" result="scripthash_balance" desc="Return the confirmed and unconfirmed balances of a script hash.">
		<param name="scripthash" type="string" desc="The script hash as a hexadecimal string."/>
	</request>
	<request name="blockchain.scripthash.get_history" dir="client" result="array<tx_info_history>" desc="Return the confirmed and unconfirmed history of a script hash.">
		<param name="scripthash" type="string" desc="The script hash as a hexadecimal string."/>
	</request>
	<request name="blockchain.transaction.id_from_pos" dir="client" result="object" desc="Return the confirmed and unconfirmed history of a script hash.">
		<param name="height" type="number" desc="The main chain block height, a non-negative integer."/>
		<param name="tx_pos" type="number" desc="A zero-based index of the transaction in the given block, an integer."/>
		<param name="merkle" type="boolean" default="false" desc="Whether a merkle proof should also be returned, a boolean."/>
	</request>
	<request name="blockchain.scripthash.get_mempool" dir="client" result="array<tx_info_mempool>" desc="Return the unconfirmed transactions of a script hash.">
		<param name="scripthash" type="string" desc="The script hash as a hexadecimal string."/>
	</request>
	<request name="blockchain.scripthash.listunspent" dir="client" result="array<tx_info_unspent>" desc="A list of unspent outputs in blockchain order. This function takes the mempool into account.">
		<param name="scripthash" type="string" desc="The script hash as a hexadecimal string."/>
	</request>
	<request name="blockchain.scripthash.subscribe" dir="client" result="string" desc="Subscribe to a script hash.">
		<param name="scripthash" type="string" desc="The script hash as a hexadecimal string."/>
	</request>
	<notification name="blockchain.scripthash.subscribe" dir="server">
		<param name="scripthash" type="string" desc="The script hash as a hexadecimal string."/>
		<param name="status" type="string" desc="The script hash status."/>
	</notification>

  <!-- Shouldn't be used by wallet clients
	<request name="server.add_peer" dir="client" result="boolean" desc="A newly-started server uses this call to get itself into other servers’ peers lists. It sould not be used by wallet clients.">
		<param name="features" type="object" desc=""/>
	</request>
  -->

	<!-- from 1.2 -->
	<request name="server.ping" dir="client" result="void"/>
	<request name="mempool.get_fee_histogram" dir="client" result="array<tuple[number, number]>"
			desc="Return a histogram of the fee rates paid by transactions in the memory pool, weighted by transaction size. [fee, vsize] pairs"/>


	<!-- removed in 1.1
	<request name="blockchain.utxo.get_address" dir="client" result="any">
		<param name="tx_hash" type="string" desc=""/>
		<param name="index" type="string" desc=""/>
	</request>
	<request name="blockchain.numblocks.subscribe" dir="client" result="number"/>
	<notification name="blockchain.numblocks.subscribe" dir="server">
		<param name="block_height" type="number" desc=""/>
	</notification>
	-->

	<!-- deprecated since 1.2
	<request name="blockchain.block.get_chunk" dir="client" result="string">
		<param name="index" type="number" desc=""/>
	</request>

	<request name="blockchain.address.get_balance" dir="client" result="scripthash_balance">
		<param name="address" type="string" desc="The address as a Base58 string."/>
	</request>
	<request name="blockchain.address.get_history" dir="client" result="array<object>">
		<param name="address" type="string" desc="The address as a Base58 string."/>
	</request>
	<request name="blockchain.address.get_mempool" dir="client" result="array<object>">
		<param name="address" type="string" desc="The address as a Base58 string."/>
	</request>
	<request name="blockchain.address.listunspent" dir="client" result="array<object>">
		<param name="address" type="string" desc="The address as a Base58 string."/>
	</request>

	<request name="blockchain.address.subscribe" dir="client" result="string">
		<param name="address" type="string" desc="The address as a Base58 string."/>
	</request>
	<notification name="blockchain.address.subscribe" dir="server">
		<param name="address" type="string" desc="The address as a Base58 string."/>
		<param name="tx_hash" type="string" desc=""/>
	</notification>
	-->

</idl>
